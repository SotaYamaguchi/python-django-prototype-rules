
# Django 社内向けMVP開発ルール

## フレームワーク選択
- **最新の安定版Djangoを使用**
- Django REST Framework (DRF) でAPI開発
- 可能な限りDjangoの標準機能を優先

## プロジェクト構造
```
project_name/
├── manage.py
├── requirements.txt
├── .env
├── .gitignore
├── project_name/
│   ├── settings/
│   │   ├── __init__.py
│   │   ├── base.py
│   │   └── development.py
│   ├── urls.py
│   ├── wsgi.py
│   └── asgi.py
├── apps/
│   ├── users/
│   ├── core/
│   └── api/
├── static/
├── media/
└── templates/
```

## 開発標準
- 環境別設定（development, production）
- 基本的なエラーハンドリングとログ出力
- Djangoのマイグレーションシステムを使用
- Django命名規則に従う
- クラスベースビューを優先
- 基本的な認証・認可を実装
- Django管理画面を活用
- PEP 8スタイルガイドに従う
- 型ヒントを使用

## セキュリティとベストプラクティス
- `SECRET_KEY`は環境変数から取得（推奨）
- CSRF保護はDjangoのデフォルト設定で十分
- 基本的な入力検証（Djangoの標準バリデーション）
- Django ORMを使用（SQLインジェクションは自動防止）
- セキュリティミドルウェアはDjangoのデフォルトでOK
- セッション設定はDjangoのデフォルトで十分

## 外部アクセス設定（ngrok/トンネリング）
### ngrokでの開発
社内デモ用にngrokを使用する場合の設定：

```python
# ALLOWED_HOSTS for development with ngrok
ALLOWED_HOSTS = ['*']  # 開発用のみ

# CSRF settings for ngrok and external access
CSRF_TRUSTED_ORIGINS = [
    'https://*.ngrok.io',
    'https://*.ngrok-free.app',
    'https://*.ngrok.app',
    'http://127.0.0.1:8000',
    'http://localhost:8000',
]

# Additional headers for ngrok
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_TZ = True
```

### 使用方法
1. Django開発設定にngrok設定を追加
2. Django開発サーバーを再起動
3. ngrok起動: `ngrok http 127.0.0.1:8000`
4. 生成されたngrok URLでアクセス

**注意**: これらの設定は開発用のみ。本番環境では具体的なドメイン名を使用。

## データベース設定
- **開発**: SQLite（簡単なセットアップ、外部依存なし）
- **本番**: PostgreSQL
- Djangoのマイグレーションシステムを使用
- Djangoモデルベストプラクティスに従う
- 基本的なデータベース制約とバリデーション

## API開発（DRF）
- Django REST FrameworkでAPI開発
- 適切なシリアライザーとバリデーション
- ViewSetとRouterで一貫したAPI構造
- 適切なHTTPステータスコード
- 基本的なフィルタリングと検索
- APIドキュメント（drf-spectacular）

## エラーハンドリングとログ
- 基本的なログ設定
- Djangoの例外処理メカニズム
- セキュリティ関連イベントのログ
- 開発用のエラーページ

## MVP開発の優先事項
- **機能実装を最優先**：完璧なコードより動作するプロトタイプ
- **迅速な開発サイクル**：1-2週間での機能実装
- **社内フィードバック重視**：ユーザビリティを優先
- **最小限の機能セット**：コア機能のみ実装
