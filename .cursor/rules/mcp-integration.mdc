---
alwaysApply: true
description: Comprehensive MCP integration strategy for development workflow
---

# MCP Integration Rules

## MCP Ecosystem Overview
This project leverages multiple MCP servers for enhanced development workflow:
- **Context7 MCP**: Documentation and code reference
- **Playwright MCP**: Visual testing and browser automation  
- **DeepWiki MCP**: GitHub repository insights

## MCP Server Configuration
Reference [mcp.json](mdc:mcp.json) for current server setup:
- Each MCP server serves specific development needs
- Always ensure MCP servers are running before development sessions
- Update server configurations based on project requirements

## Development Workflow Integration

### Phase 1: Research & Planning
1. **Use Context7 MCP** for library research and implementation patterns
2. **Use DeepWiki MCP** for understanding existing codebases and best practices
3. Plan implementation based on documented patterns and best practices

### Phase 2: Implementation
1. **Implement features** using patterns discovered through Context7 MCP
2. **Follow Django rules** enhanced with Context7 documentation references
3. **Write code** following best practices from MCP-sourced documentation

### Phase 3: Visual Verification
1. **Use Playwright MCP** for visual confirmation of all user-facing features
2. **Test functionality** through actual browser interaction
3. **Verify responsive design** and accessibility compliance
4. **Document visual behavior** with screenshots when needed

### Phase 4: Documentation & Iteration
1. **Update project documentation** based on MCP findings
2. **Refine implementation** based on visual testing results
3. **Document lessons learned** for future reference

## MCP Tool Usage Priority

### Primary Tools (Always Use)
- **Context7 MCP**: For all documentation and implementation guidance
- **Playwright MCP**: For all visual verification and testing

### Secondary Tools (Use When Needed)
- **DeepWiki MCP**: For repository analysis and understanding existing patterns

## Cross-MCP Workflows

### Django API Development
1. **Context7**: Research DRF patterns and best practices
2. **Implementation**: Follow Context7-guided patterns
3. **Playwright**: Visually test API endpoints through frontend
4. **Context7**: Reference testing patterns for comprehensive coverage

### Frontend Development
1. **Context7**: Research frontend framework patterns
2. **Implementation**: Build features following documented patterns
3. **Playwright**: Comprehensive visual testing and interaction verification
4. **Iteration**: Refine based on visual testing feedback

### Database & Performance
1. **Context7**: Research Django ORM optimization patterns
2. **Implementation**: Apply performance best practices
3. **Playwright**: Test performance impact on user experience
4. **Context7**: Research monitoring and profiling tools

## Quality Assurance Through MCP
- **Documentation accuracy**: Verify Context7 suggestions through implementation
- **Visual consistency**: Use Playwright MCP for systematic UI testing
- **Best practices adherence**: Cross-reference multiple Context7 sources
- **Performance validation**: Test performance claims through visual tools

## MCP Integration Best Practices
- **Start with Context7** for any new development task
- **Always visually verify** with Playwright MCP for user-facing features
- **Document MCP findings** in project documentation
- **Update rules** based on successful MCP-guided implementations
- **Share successful patterns** discovered through MCP usage

## Troubleshooting MCP Issues
- Verify MCP server status if tools are unresponsive
- Check [mcp.json](mdc:mcp.json) configuration for proper server setup
- Use alternative MCP servers if primary ones are unavailable
- Fall back to manual documentation when MCP is unavailable

## Project-Specific MCP Usage
- **This Django prototype** primarily uses Context7 for Django/DRF patterns
- **Visual testing** mandatory for all chat application features
- **Performance testing** important for real-time chat functionality
- **Documentation updates** based on MCP-discovered patterns